{"ast":null,"code":"/*\n    ------------------------------------------------------------------\n    Allocine API module for Node.js\n    ------------------------------------------------------------------\n\n    Author :        Leeroy Brun (leeroy.brun@gmail.com)\n    Github repo :   https://github.com/leeroybrun/node-allocine-api\n    Version :       0.1.4\n    Release date :  23.05.2013\n*/\nvar crypto = require('crypto'),\n    http = require('http');\n\nvar allocine = function () {\n  // Configuration\n  this.config = {\n    apiHostName: 'api.allocine.fr',\n    apiBasePath: '/rest/v3/',\n    apiPartner: 'V2luZG93czg',\n    apiSecretKey: 'e2b7fd293906435aa5dac4be670e7982',\n    imgBaseUrl: 'http://images.allocine.fr',\n    userAgent: 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0; MSAppHost/1.0)'\n  }; // Presets for the API calls\n\n  this.presets = {\n    global: {\n      partner: this.config.apiPartner,\n      format: 'json'\n    },\n    movielist: {\n      profile: 'large'\n    },\n    movie: {\n      profile: 'large'\n    },\n    tvserieslist: {\n      filter: 'top',\n      order: 'viewcount'\n    },\n    tvseries: {\n      profile: 'large'\n    },\n    tvseriesbroadcastlist: {\n      profile: 'large'\n    },\n    season: {\n      profile: 'large'\n    },\n    seasonlist: {\n      profile: 'small'\n    },\n    news: {\n      profile: 'large'\n    },\n    newslist: {\n      profile: 'large'\n    },\n    media: {\n      mediafmt: 'mp4'\n    },\n    feature: {\n      profile: 'large'\n    },\n    featurelist: {\n      profile: 'large'\n    },\n    picturelist: {\n      profile: 'large'\n    },\n    videolist: {\n      mediafmt: 'mp4'\n    },\n    search: {\n      filter: 'movie,tvseries,theater,news,video'\n    }\n  }; // Extend an object with other objects\n\n  this.extend = function (dst) {\n    for (var i = 0; i < arguments.length; i++) {\n      if (arguments[i] !== dst) {\n        for (var key in arguments[i]) {\n          dst[key] = arguments[i][key];\n        }\n\n        ;\n      }\n    }\n\n    ;\n    return dst;\n  }; // Build path for accessing Allocine API\n\n\n  this.buildPath = function (route, params) {\n    var path = this.config.apiBasePath + route; // Extend params with route presets\n\n    params = this.extend({}, this.presets.global, this.presets[route], params);\n\n    if (params) {\n      var tokens = []; // Fill the tokens array and sort it\n\n      for (var param in params) {\n        tokens.push(param + '=' + encodeURIComponent(params[param]));\n      }\n\n      tokens.sort();\n      path += '?' + tokens.join('&'); // Build and encode path\n\n      var date = new Date();\n      var sed = date.getFullYear() + '' + ('0' + (date.getMonth() + 1)).slice(-2) + '' + ('0' + date.getDate()).slice(-2);\n      var sig = this.config.apiSecretKey + tokens.join('&') + '&sed=' + sed; // Hash \"sig\" parameter\n\n      var shasum = crypto.createHash('sha1');\n      sig = encodeURIComponent(shasum.update(sig, 'utf-8').digest('base64'));\n      return path + '&sed=' + sed + '&sig=' + sig;\n    }\n\n    return path;\n  }; // Request the API with the given path\n\n\n  this.request = function (path, callback) {\n    var options = {\n      hostname: this.config.apiHostName,\n      path: path,\n      headers: {\n        'User-Agent': this.config.userAgent\n      }\n    };\n\n    if (this.config.proxyHostName) {\n      options.path = \"http://\" + options.hostname + options.path;\n      options.port = this.config.proxyPort;\n      options.hostname = this.config.proxyHostName;\n    } // Call the API, fetch returned data and pass it to the callback\n\n\n    http.get(options, function (res) {\n      if (res.statusCode === 200) {\n        var data = '';\n        var headerContentLength = parseInt(res.headers['content-length'], 10);\n        var dataContentLength = 0;\n        res.on('data', function (chunk) {\n          data += chunk;\n          dataContentLength += chunk.length;\n        });\n        res.on('end', function () {\n          // Verify the length of received data (perhaps not the declared size)\n          if (!isNaN(headerContentLength) && headerContentLength !== dataContentLength) {\n            return callback(\"Invalid size \" + dataContentLength + \"/\" + headerContentLength);\n          } // TODO : better error handling, if data contains \"error\" will be catch as error\n\n\n          if (/<error.*>/i.test(data)) {\n            callback(data, {});\n          } else {\n            // Success\n            callback(null, JSON.parse(data));\n          }\n        });\n      } else {\n        // Error\n        callback(res.statusCode, {});\n      }\n    }).on('error', function (e) {\n      // Error, we need the error, not the message, to understand what is the problem !  (Timeout ?)\n      callback(e, {});\n    });\n    ;\n  }; // Main method, used to call the API\n\n\n  this.api = function (method, options, callback) {\n    var path = this.buildPath(method, options);\n    this.request(path, callback);\n  };\n\n  this.setProxy = function (proxyHostName, proxyPort) {\n    this.config.proxyHostName = proxyHostName;\n    this.config.proxyPort = proxyPort;\n  };\n\n  return this;\n};\n\nmodule.exports = new allocine();","map":{"version":3,"sources":["/home/acdr/apprendre/Udemy/react-rmdb/node_modules/allocine-api/lib/allocine-api.js"],"names":["crypto","require","http","allocine","config","apiHostName","apiBasePath","apiPartner","apiSecretKey","imgBaseUrl","userAgent","presets","global","partner","format","movielist","profile","movie","tvserieslist","filter","order","tvseries","tvseriesbroadcastlist","season","seasonlist","news","newslist","media","mediafmt","feature","featurelist","picturelist","videolist","search","extend","dst","i","arguments","length","key","buildPath","route","params","path","tokens","param","push","encodeURIComponent","sort","join","date","Date","sed","getFullYear","getMonth","slice","getDate","sig","shasum","createHash","update","digest","request","callback","options","hostname","headers","proxyHostName","port","proxyPort","get","res","statusCode","data","headerContentLength","parseInt","dataContentLength","on","chunk","isNaN","test","JSON","parse","e","api","method","setProxy","module","exports"],"mappings":"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","sourcesContent":["/*\n    ------------------------------------------------------------------\n    Allocine API module for Node.js\n    ------------------------------------------------------------------\n\n    Author :        Leeroy Brun (leeroy.brun@gmail.com)\n    Github repo :   https://github.com/leeroybrun/node-allocine-api\n    Version :       0.1.4\n    Release date :  23.05.2013\n*/\n\n\nvar crypto = require('crypto'),\n    http = require('http');\n\nvar allocine = function() {\n\n    // Configuration\n    this.config = {\n        apiHostName:  'api.allocine.fr',\n        apiBasePath:  '/rest/v3/',\n        apiPartner:   'V2luZG93czg',\n        apiSecretKey: 'e2b7fd293906435aa5dac4be670e7982',\n        imgBaseUrl:   'http://images.allocine.fr',\n        userAgent:    'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0; MSAppHost/1.0)'\n    };\n\n    // Presets for the API calls\n    this.presets = {\n        global: {\n            partner: this.config.apiPartner,\n            format: 'json'\n        },\n        movielist: { profile: 'large' },\n        movie: { profile: 'large' },\n        tvserieslist: { filter: 'top', order: 'viewcount' },\n        tvseries: { profile: 'large' },\n        tvseriesbroadcastlist: { profile: 'large' },\n        season: { profile: 'large' },\n        seasonlist: { profile: 'small' },\n        news: { profile: 'large' },\n        newslist: { profile: 'large' },\n        media: { mediafmt: 'mp4' },\n        feature: { profile: 'large' },\n        featurelist: { profile: 'large' },\n        picturelist: { profile: 'large' },\n        videolist: { mediafmt: 'mp4' },\n        search: { filter: 'movie,tvseries,theater,news,video' }\n    }\n\n    // Extend an object with other objects\n    this.extend = function (dst) {\n        for (var i = 0; i < arguments.length; i++) {\n            if (arguments[i] !== dst) {\n                for(var key in arguments[i]) {\n                    dst[key] = arguments[i][key];\n                };\n            }\n        };\n\n        return dst;\n    }\n\n    // Build path for accessing Allocine API\n    this.buildPath = function(route, params) {\n        var path = this.config.apiBasePath + route;\n\n        // Extend params with route presets\n        params = this.extend({}, this.presets.global, this.presets[route], params);\n\n        if(params) {\n            var tokens = [];\n\n            // Fill the tokens array and sort it\n            for(var param in params) {\n                tokens.push(param +'='+ encodeURIComponent(params[param]));\n            }\n            tokens.sort();\n\n            path += '?'+ tokens.join('&');\n\n            // Build and encode path\n            var date = new Date();\n            var sed = date.getFullYear() +''+ ('0'+ (date.getMonth()+1)).slice(-2) +''+ ('0'+ (date.getDate())).slice(-2);\n            var sig = this.config.apiSecretKey + tokens.join('&') +'&sed='+ sed;\n\n            // Hash \"sig\" parameter\n            var shasum = crypto.createHash('sha1')\n            sig = encodeURIComponent(shasum.update(sig, 'utf-8').digest('base64'));\n\n            return path +'&sed='+ sed +'&sig='+ sig;\n        }\n        \n        return path;\n    }\n\n    // Request the API with the given path\n    this.request = function(path, callback) {\n        var options = {\n            hostname: this.config.apiHostName,\n            path: path, \n            headers: {\n                'User-Agent': this.config.userAgent\n            }\n        };\n        if (this.config.proxyHostName) {\n        \toptions.path=\"http://\"+options.hostname+options.path;\n        \toptions.port=this.config.proxyPort;\n        \toptions.hostname=this.config.proxyHostName;\n        }\n  \n        // Call the API, fetch returned data and pass it to the callback\n        http.get(options, function(res) {\n            if(res.statusCode === 200) {\n                var data = '';\n\n          \t\t\tvar headerContentLength = parseInt(res.headers['content-length'], 10);\n          \t\t\tvar dataContentLength=0;\n          \t\t\t\n                res.on('data', function(chunk) {\n                    data += chunk;\n                    dataContentLength += chunk.length;\n                });\n\n                res.on('end', function() {\n                \t// Verify the length of received data (perhaps not the declared size)\n                \t\tif (!isNaN(headerContentLength) && headerContentLength!==dataContentLength) {\n                \t\t\treturn callback(\"Invalid size \"+dataContentLength+\"/\"+headerContentLength);\n                \t\t}\n                    // TODO : better error handling, if data contains \"error\" will be catch as error\n                    if(/<error.*>/i.test(data)) {\n                        callback(data, {});\n                    } else {\n                        // Success\n                        callback(null, JSON.parse(data));\n                    }\n                });\n            } else {\n                // Error\n                callback(res.statusCode, {});\n            }\n        }).on('error', function(e) {\n            // Error, we need the error, not the message, to understand what is the problem !  (Timeout ?)\n            callback(e, {});\n        });;\n    }\n\n    // Main method, used to call the API\n    this.api = function(method, options, callback) {\n        var path = this.buildPath(method, options);\n\n        this.request(path, callback);\n    }\n    \n    this.setProxy = function(proxyHostName, proxyPort) {\n    \tthis.config.proxyHostName=proxyHostName;\n    \tthis.config.proxyPort=proxyPort;\n    }\n\n    return this;\n}\n\nmodule.exports = new allocine();"]},"metadata":{},"sourceType":"script"}